//PLEASE FIND THE REFERENCES FOR THE PARTS OF THE CODE BELOW//
// IFTTT functions - ESP32 Publish Sensor Readings to Google Sheets (ESP8266 Compatible)
// available on: https://randomnerdtutorials.com/esp32-esp8266-publish-sensor-readings-to-google-sheets/
// WiFi connection and recconetion functions - Github by espresif/arduino-esp32
// available on: https://github.com/espressif/arduino-esp32/tree/master/libraries/WiFi  

#include <Wire.h>
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <Adafruit_MLX90614.h>
#include "DHTesp.h"
#include <NTPClient.h>
#include <WiFiUdp.h>

#define DHTpin 15    //pin for temp/humidity sensor
#define sendInterval 5000UL

struct pulse
{
  const uint8_t PIN;
  uint32_t pulseCount;
  bool active;
};

pulse Pulse = {23, 0, false};

void IRAM_ATTR isr()
{
  Pulse.pulseCount += 1;
  Pulse.active = true;
}

unsigned long previousMillis = 0;
unsigned long interval = 30000;
unsigned long lastSend = 0;
unsigned long start_time = 0;
unsigned long end_time = 0;
unsigned long stepsNew = 0, secCount = 0, tempo = 0, steps = 0, steps_old = 0, Cycles = 0, Previous_cycles = 0; 
String TimeRun;
float humi = 0.0, temp = 0.0, tempGear = 0.0, Ambient = 0.0;
uint16_t RPM = 0.0;
int NOfHoles = 6; //number of holes in the encoder wheel

//IR temp sensor
Adafruit_MLX90614 mlx = Adafruit_MLX90614();

DHTesp dht;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);

// Unique IFTTT URL resource
const char* resource = "/trigger/DataLog/with/key/c_Pna41H6KMQ7ZuBQ5L1NN";
// Maker Webhooks IFTTT
const char* server = "maker.ifttt.com";

//SSID AND PASSWORD OF WIFI//
////////////////////////////

const char * ssid = "kuba’s iPhone";
const char * password = "kuba1111";

//CONNECTION TO WIFI//
//////////////////////

void ConnectToWiFi()
{

  //connecting to internet
  Serial.print("Connecting to "); Serial.println(ssid);
  WiFi.mode(WIFI_STA);
  WiFiClient client;
  WiFi.setSleep(false);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  };
  Serial.print(("Connected. My IP address is: "));
  Serial.println(WiFi.localIP());

}

void setup()
{

  Serial.begin(115200); //Serial
  Serial.println();

  //DHT sensor
  dht.setup(DHTpin, DHTesp::DHT11); //for DHT11 Connect DHT sensor to GPIO 17

  //connecting to internet
  ConnectToWiFi();

  //DEFIINITION OF PINS FOR IR TEMP SENSOR//
  /////////////////////////////////////////

  pinMode(22, OUTPUT);       // Clock goes from master to peripherical
  pinMode(21, INPUT_PULLUP); // Data should be internally pulled up (or 4.7K pullup to 3.3v)
  Wire.begin(21, 22, 10000);

  //RPM SEONSOR//
  ///////////////
  //pinMode(PIN_sensor_RPM, INPUT_PULLUP);
  pinMode(Pulse.PIN, INPUT_PULLUP);
  attachInterrupt(Pulse.PIN, isr, RISING);

  //NTP TIM FUNCTION//
  ////////////////////
  timeClient.begin();
  timeClient.setTimeOffset(2*3600);
}

void loop()
{

  //RECONNECT TO WIFI WHEN THE CONNECTION IS LOST//
  ////////////////////////////////////////////////

  unsigned long currentMillis = millis();
  // if WiFi is down, try reconnecting
  if ((WiFi.status() != WL_CONNECTED) && (currentMillis - previousMillis >= interval)) {
    Serial.print(millis());
    Serial.println("Reconnecting to WiFi...");
    WiFi.disconnect();
    WiFi.reconnect();
    previousMillis = currentMillis;
  }

  noBlock_Delay(sendInterval);

     //RUNNING TIME//
    ///////////////
    timeClient.update();
    TimeRun = timeClient.getFormattedTime();
    
    //RMP CALC//
    ////////////
     if (Pulse.active)
  {
    steps = Pulse.pulseCount;
    Pulse.active = false;

  }
  
  calcRPM();

}

void noBlock_Delay(unsigned long d)
{
  if ( millis() - lastSend > d)
  {

    //GET MEASURED DATA//
    ////////////////////

    //DHT11
    humi = dht.getHumidity();
    temp = dht.getTemperature();

    //IR temp sensor
    tempGear = mlx.readObjectTempC();
    Ambient = mlx.readAmbientTempC();
    
    //PRINT THEM TO MONITOR//
    /////////////////////////

    Serial.print("Humidity: ");
    Serial.print(humi);
    Serial.print("%");
    Serial.print("  |  ");
    Serial.print("Temperature: ");
    Serial.print(temp);
    Serial.println("°C");

    Serial.print("Gear Temperature: ");
    Serial.print(tempGear);
    Serial.println("°C");

    Serial.print("Ambient Temperature: ");
    Serial.print(Ambient);
    Serial.println("°C");

    Serial.print("RPM = ");
    Serial.println(RPM);

    Serial.print("Cycles = ");
    Serial.println(Cycles);

    Serial.print("Time Running = ");
    Serial.println(TimeRun);

    //SEND TO CLOUD//
    /////////////////

    makeIFTTTRequest();
    lastSend = millis();

  }
}

//IFTTT DATA SEND FUCNTION//
////////////////////////////

void makeIFTTTRequest() {
  Serial.print("Connecting to ");
  Serial.print(server);

  WiFiClient client;
  int retries = 5;
  while (!!!client.connect(server, 80) && (retries-- > 0)) {
    Serial.print(".");
  }
  Serial.println();
  if (!!!client.connected()) {
    Serial.println("Failed to connect...");
  }

  Serial.print("Request resource: ");
  Serial.println(resource);


  String string_temperature =  String(temp, DEC);
  String string_humidity =  String(humi, DEC);
  String string_tempGear =  String(tempGear, DEC);
  String string_RPM =  String(RPM, DEC);
  String string_Cycles =  String(Cycles, DEC);
//  String string_TimeRun =  String(TimeRun, DEC);
  
  String jsonObject = String("{\"value1\":\"") + string_temperature + "|||" + string_humidity + "|||" + string_tempGear + "|||" + string_RPM + "|||" + string_Cycles + "|||" + TimeRun + "\"}";

  client.println(String("POST ") + resource + " HTTP/1.1");
  client.println(String("Host: ") + server);
  client.println("Connection: close\r\nContent-Type: application/json");
  client.print("Content-Length: ");
  client.println(jsonObject.length());
  client.println();
  client.println(jsonObject);

  int timeout = 5 * 10; // 5 seconds
  while (!!!client.available() && (timeout-- > 0)) {
    delay(100);
  }
  if (!!!client.available()) {
    Serial.println("No response...");
  }
  while (client.available()) {
    Serial.write(client.read());
  }

  Serial.println("\nclosing connection");
  client.stop();
}

void calcRPM()
{
  static uint32_t lastRPM = 0;
  if (millis() - lastRPM > 1000)
  {
    if (steps_old == steps)
    {
      RPM = 0;
    }

    else
    {
      tempo = steps - steps_old;
      RPM = (tempo * 60 / NOfHoles);
      steps_old = steps;
    }
    lastRPM = millis();
  }
  if (steps - stepsNew >= NOfHoles)
  {
    Cycles += 1;
    stepsNew = steps;
  }
}
